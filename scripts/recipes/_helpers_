#!/usr/bin/env bash

# Author:     Héctor Molinero Fernández <hector@molinero.xyz>
# Repository: https://github.com/zant95/misc
# License:    MIT, https://opensource.org/licenses/MIT
#

# Exit on errors
set -eu

printInfo() {
	printf -- '   - %s\n' "$@"
}

printAction() {
	printf -- '\033[1;33m + \033[1;32m%s \033[0m\n' "$@"
}

printError() {
	>&2 printf -- '\033[1;33m + \033[1;31m%s \033[0m\n' "$@"
}

doGitCloneAndCd() {
	repository="$1"
	directory="$2"
	shift 2

	rm -rf "$directory"

	git clone --recursive "$repository" "$directory"
	cd "$directory"
}

doGitCloneLastTagAndCd() {
	doGitCloneAndCd "$@"

	if git describe --tags >/dev/null 2>&1; then
		git checkout "$(git describe --abbrev=0 --tags)"
	fi
}

doSvnCheckoutAndCd() {
	repository="$1"
	revision="$2"
	directory="$3"
	shift 3

	rm -rf "$directory"

	svn checkout "$repository" --depth infinity "$directory"

	if [ "$revision" != "latest" ]; then
		svn up -r "$revision"
	fi

	cd "$directory"
}

doConfigure() {
	if [ -f autogen.sh ]; then
		./autogen.sh
	elif [ -f buildconf.sh ]; then
		./buildconf.sh
	elif [ -f bootstrap ]; then
		./bootstrap
	fi

	./configure "$@"
}

doConfigureAndMake() {
	doConfigure "$@"
	doMake
}

doMake() {
	nice make \
		-j $(nproc) \
		"$@"
}

doCmake() {
	mkdir ./build && cd ./build
	cmake .. "$@"
}

downloadAndExtract() {
	url="$1"
	directory="$2"
	package=$(mktemp -u /tmp/pkg.XXXXXXXX)
	shift 2

	rm -rf "$directory"
	mkdir -p "$directory"

	wget "$url" --show-progress -qO "$package"
	mimeType=$(file -b --mime-type "$package")

	if [ "$mimeType" = 'application/zip' ]; then
		tempDirectory="$(mktemp -d /tmp/dir.XXXXXXXX)"
		unzip -qd "$tempDirectory" "$package"

		if [ "$(find "$tempDirectory" -maxdepth 1 | wc -l)" = '2' ]; then
			# Strip parent folder
			mv "$tempDirectory"/*/* "$directory"
		else
			mv "$tempDirectory"/* "$directory"
		fi

		rm -rf "$tempDirectory"
	elif [ "$mimeType" = 'application/vnd.debian.binary-package' ]; then
		ar p "$package" $(ar t "$package" | grep 'data.tar') > "$package".data
		tar --strip-components=1 -xf "$package".data -C "$directory"
		
		rm "$package".data
	else
		tar --strip-components=1 -xf "$package" -C "$directory"
	fi

	rm "$package"
}

downloadExtractAndCd() {
	downloadAndExtract "$@"
	cd "$2"
}

createWrapper() {
	installDir="$1"
	binDir="$2"
	execName="$3"
	scriptContent="$4"
	shift 4

	mkdir -p "$installDir"/.wrappers
	printf -- '%s\n' "$scriptContent" > "$installDir"/.wrappers/"$execName".sh

	ln -fs "$installDir"/.wrappers/"$execName".sh "$binDir"/"$execName"
	chmod 755 "$installDir"/.wrappers/"$execName".sh
}

createLauncher() {
	installDir="$1"
	launcherName="$2"
	launcherContent="$3"
	shift 3

	mkdir -p "$installDir"/.launchers "$HOME"/.local/share/applications
	printf -- '%s\n' "$launcherContent" > "$installDir"/.launchers/"$launcherName".desktop

	ln -fs "$installDir"/.launchers/"$launcherName".desktop "$HOME"/.local/share/applications/opt."$launcherName".desktop
	chmod 644 "$installDir"/.launchers/"$launcherName".desktop
}

